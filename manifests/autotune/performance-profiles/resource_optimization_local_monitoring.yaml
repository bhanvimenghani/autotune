apiVersion: "recommender.com/v1"
kind: "KruizePerformanceProfile"
metadata:
  name: "resource-optimization-local-monitoring"
profile_version: 1.0
k8s_type: openshift

slo:
  slo_class: "resource_usage"
  direction: "minimize"

  # Refer to src/.../performanceProfiles/PerformanceProfileInterface/RemoteMonitoringOpenShiftImpl.java
  objective_function:
    function_type: source

  function_variables:
    # CPU Request
    # Show cpu requests in cores for a container in a deployment
    - name: cpuRequest
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: 'avg'
          query: 'avg by(container, namespace) (kube_pod_container_resource_requests{container!='', container!="", container!="POD", pod!="", resource="cpu", unit="core" ,namespace="$NAMESPACE$",container="$CONTAINER_NAME$"})'

        # Show sum of cpu requests in bytes for a container in a deployment
        - function: 'sum'
          query: 'sum by(container, namespace) (kube_pod_container_resource_requests{container!='', container!="", container!="POD", pod!="", resource="cpu", unit="core" ,namespace="$NAMESPACE$",container="$CONTAINER_NAME$"})'

        - function: 'min'
          query: 'min by(container, namespace) (kube_pod_container_resource_requests{container!='', container!="", container!="POD", pod!="", resource="cpu", unit="core" ,namespace="$NAMESPACE$",container="$CONTAINER_NAME$"})'

        - function: 'max'
          query: 'max by(container, namespace) (kube_pod_container_resource_requests{container!='', container!="", container!="POD", pod!="", resource="cpu", unit="core" ,namespace="$NAMESPACE$",container="$CONTAINER_NAME$"})'

    # CPU Limit
    # Show cpu limits in bytes for a container in a deployment
    - name: cpuLimit
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: avg
          query: 'avg by(container,namespace) (kube_pod_container_resource_limits{container!='', container!="", container!="POD", pod!="", resource="cpu", unit="core",namespace="$NAMESPACE$",container="$CONTAINER_NAME$"})'

        # Show sum of cpu limits in bytes for a container in a deployment
        - function: sum
          query: 'sum by(container,namespace) (kube_pod_container_resource_limits{container!='',container!="", container!="POD", pod!="", resource="cpu", unit="core",namespace="$NAMESPACE$",container="$CONTAINER_NAME$"})'

        - function: 'max'
          query: 'max by(container,namespace) (kube_pod_container_resource_limits{container!='', container!="", container!="POD", pod!="", resource="cpu", unit="core",namespace="$NAMESPACE$",container="$CONTAINER_NAME$"})'

        - function: 'max'
          query: 'min by(container,namespace) (kube_pod_container_resource_limits{container!='', container!="", container!="POD", pod!="", resource="cpu", unit="core",namespace="$NAMESPACE$",container="$CONTAINER_NAME$"})'


    # CPU Usage
    # CPU Usage query uses recording rule to get the data. Recording rule has changed
    # between openshift 4.8 and 4.9 versions. Until openshift v4.8, cpu usage recording
    # rule used "rate" function and from openshift v4.9, it is using "irate". As the
    # metric name was also changed from
    # "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate" to
    # "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate",
    # mentioning both the queries below as we need to use one of them based on the
    # openshift version.

    # Average CPU per container in a deployment
    - name: cpuUsage
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      # For openshift versions <=4.8
      aggregation_functions:
        - function: avg
          query: 'avg by(container, namespace)(avg_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{container!='', container!="POD", pod!="",namespace="$NAMESPACE$",container="$CONTAINER_NAME$" }[$MEASUREMENT_DURATION_IN_MIN$m]))'
          versions: "<=4.8"

        # For openshift versions >=4.9
        - function: avg
          query: 'avg by(container, namespace)(avg_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!='', container!="POD", pod!="",namespace="$NAMESPACE$",container="$CONTAINER_NAME$" }[$MEASUREMENT_DURATION_IN_MIN$m]))'
          versions: ">4.9"

        # Approx minimum CPU per container in a deployment
        # For openshift versions <=4.8
        - function: min
          query: 'min by(container, namespace)(min_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\" }[$MEASUREMENT_DURATION_IN_MIN$m]))'
          versions: "<=4.8"

        # For openshift versions >=4.9
        - function: min
          query: 'min by(container, namespace)(min_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m]))'
          versions: ">4.9"

        # Approx maximum CPU per container in a deployment
        # For openshift versions <=4.8
        - function: max
          query: 'max by(container, namespace)(max_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\" }[$MEASUREMENT_DURATION_IN_MIN$m]))'
          versions: "<=4.8"

        # For openshift versions >=4.9
        - function: max
          query: 'max by(container, namespace)(max_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\" }[$MEASUREMENT_DURATION_IN_MIN$m]))'
          versions: ">4.9"

        # Sum of CPU usage for a container in all pods of a deployment
        # For openshift versions <=4.8
        - function: sum
          query: 'sum by(container, namespace)(avg_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\" }[$MEASUREMENT_DURATION_IN_MIN$m]))'
          versions: "<=4.8"

        # For openshift versions >=4.9
        - function: sum
          query: 'sum by(container, namespace)(avg_over_time(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\" }[$MEASUREMENT_DURATION_IN_MIN$m]))'
          versions: ">4.9"


    # CPU Throttling
    - name: cpuThrottle
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        # Average CPU throttling per container in a deployment
        - function: avg
          query: 'avg by(container,namespace) (rate(container_cpu_cfs_throttled_seconds_total{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m]))'

        # Maximum CPU throttling per container in a deployment
        - function: max
          query: 'max by(container,namespace) (rate(container_cpu_cfs_throttled_seconds_total{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m])))'

        # Min of CPU throttling for a container in all pods of a deployment
        - function: min
          query: 'min by(container,namespace) (rate(container_cpu_cfs_throttled_seconds_total{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m])'

        # Sum of CPU throttling for a container in all pods of a deployment
        - function: sum
          query: 'sum by(container,namespace) (rate(container_cpu_cfs_throttled_seconds_total{container!='', container!="POD", pod!="",namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m]))'



    ######################

    # Memory Request
    # Show memory requests in bytes for a container in a deployment
    - name: memoryRequest
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: avg
          query: 'avg by(container, namespace) (kube_pod_container_resource_requests{container!='', container!="POD", pod!="", resource="memory", unit="byte" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"})'

        # Show sum of memory requests in bytes for a container in a deployment
        - function: sum
          query: 'sum by(container, namespace) (kube_pod_container_resource_requests{container!='', container!="POD", pod!="", resource="memory", unit="byte" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"})'

        - function: max
          query: 'max by(container, namespace) (kube_pod_container_resource_requests{container!='', container!="POD", pod!="", resource="memory", unit="byte" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"})'

        - function: min
          query: 'min by(container, namespace) (kube_pod_container_resource_requests{container!='', container!="POD", pod!="", resource="memory", unit="byte" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"})'


    # Memory Limit
    # Show memory limits in bytes for a container in a deployment
    - name: memoryLimit
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: avg
          query: 'avg by(container,namespace) (kube_pod_container_resource_limits{container!='', container!="POD", pod!="", resource="memory", unit="byte" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"})'

        # Show sum of memory limits in bytes for a container in a deployment
        - function: sum
          query: 'sum by(container,namespace) (kube_pod_container_resource_limits{container!='', container!="POD", pod!="", resource="memory", unit="byte" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"})'

        - function: max
          query: 'max by(container,namespace) (kube_pod_container_resource_limits{container!='', container!="POD", pod!="", resource="memory", unit="byte" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"})'

        - function: min
          query: 'min by(container,namespace) (kube_pod_container_resource_limits{container!='', container!="POD", pod!="", resource="memory", unit="byte" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"})'

    # Memory Usage
    # Average memory per container in a deployment
    - name: memoryUsage
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: avg
          query: 'avg by(container, namespace) (avg_over_time(container_memory_working_set_bytes{container!='', container!="POD", pod!="", namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m]))'

        # Approx minimum memory per container in a deployment
        - function: min
          query: 'min by(container, namespace) (min_over_time(container_memory_working_set_bytes{container!='', container!="POD", pod!="", namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\" }[$MEASUREMENT_DURATION_IN_MIN$m])'

        # Approx maximum memory per container in a deployment
        - function: max
          query: 'max by(container, namespace) (max_over_time(container_memory_working_set_bytes{container!='', container!="POD", pod!="", namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m]))'

        # Sum of memory usage for a contianer in all pods of a deployment
        - function: sum
          query: 'sum by(container, namespace) (avg_over_time(container_memory_working_set_bytes{container!='', container!="POD", pod!="", namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m]))'


    # 2.4 Memory RSS
    - name: memoryRSS
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        # Average memory RSS per container in a deployment
        - function: avg
          query: 'avg by(container, namespace) (avg_over_time(container_memory_rss{container!='', container!="POD", pod!="" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m]))'

        # Approx minimum memory RSS per container in a deployment
        - function: min
          query: 'min by(container, namespace) (min_over_time(container_memory_rss{container!='', container!="POD", pod!="" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m])'


        # Approx maximum memory RSS per container in a deployment
        - function: max
          query: 'max by(container, namespace) (max_over_time(container_memory_rss{container!='', container!="POD", pod!="" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m]))'

        # Sum of memory RSS for a contianer in all pods of a deployment
        - function: sum
          query: 'sum by(container, namespace) (avg_over_time(container_memory_rss{container!='', container!="POD", pod!="" ,namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"}[$MEASUREMENT_DURATION_IN_MIN$m]))'


    # Container Last Active Timestamp
    - name: maxDate
      datasource: prometheus
      value_type: "double"
      kubernetes_object: "container"

      aggregation_functions:
        - function: max
          query: 'max by(namespace,container) (last_over_time((timestamp(container_cpu_usage_seconds_total{namespace=\"$NAMESPACE$\",container=\"$CONTAINER_NAME$\"} > 0))[15d:]))'
